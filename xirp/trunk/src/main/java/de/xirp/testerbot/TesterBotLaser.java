/** 
 * ============================================================================
 * Xirp 2: eXtendable interface for robotic purposes.
 * ============================================================================
 * 
 * Copyright (C) 2005-2007, by Authors and Contributors listed in CREDITS.txt
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at:
 *
 * 				http://www.opensource.org/licenses/cpl1.0.php
 *
 * ----------------------------
 * TesterBotLaser.java
 * ----------------------------
 *
 * Original Author:  Matthias Gernand [matthias.gernand AT gmx.de]
 * Contributor(s):   
 *
 * Changes
 * -------
 * 19.04.2007:		Created by Matthias Gernand.
 */
package de.xirp.testerbot;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import de.xirp.util.Constants;
import de.xirp.util.serialization.ObjectDeSerializer;

/**
 * Creates 681 float values in an array representing scans of a laser
 * scanner.
 * 
 * @author Matthias Gernand
 */
public class TesterBotLaser extends AbstractValueCreator {

	/**
	 * The log4j logger of this class
	 */
	private static final Logger logClass = Logger.getLogger(TesterBotLaser.class);
	/**
	 * The float arrays with laser scans read from the file.
	 */
	private List<float[]> maps = new ArrayList<float[]>( );
	/**
	 * An dummy array containing 681 different float values.
	 */
	private final float[] dummy = new float[] {1.01589F, 1.0139844F,
			1.0118622F, 1.0143224F, 0.9948726F, 0.99524796F, 0.9954896F,
			0.9952116F, 0.9951198F, 0.99308556F, 0.9942798F, 0.9772145F,
			0.97690284F, 0.9771812F, 0.9785822F, 0.9758827F, 0.9787204F,
			0.9766992F, 0.97866434F, 0.96138465F, 0.96110505F, 0.96021545F,
			0.9613554F, 0.96147203F, 0.96204245F, 0.96131665F, 0.96262944F,
			0.962323F, 0.9503235F, 0.9503132F, 0.95029515F, 0.9511237F,
			0.9492009F, 0.9505488F, 0.94925416F, 0.95055556F, 0.9400423F,
			0.9395599F, 0.9401012F, 0.9395342F, 0.939508F, 0.9406466F,
			0.9385753F, 0.88419646F, 0.8829309F, 0.88247484F, 0.88189524F,
			0.8821452F, 0.8823818F, 0.88332695F, 0.88219386F, 0.88328826F,
			0.9308614F, 0.9266548F, 0.92617375F, 0.92684245F, 0.9285951F,
			0.92822653F, 0.9270003F, 0.9253018F, 0.92636734F, 0.9265517F,
			0.8741448F, 0.8761116F, 0.87713194F, 0.87633324F, 0.87501454F,
			0.87523276F, 0.87658256F, 0.8728294F, 0.8763263F, 0.8766519F,
			0.8748732F, 0.8751726F, 0.8761689F, 0.87732536F, 0.8738106F,
			0.87402546F, 0.87510306F, 0.87499624F, 0.87901443F, 0.8795653F,
			0.87911034F, 0.8798956F, 0.87934446F, 0.8801306F, 0.88049126F,
			0.87968045F, 0.8797105F, 0.8808933F, 0.8865339F, 0.88580114F,
			0.8853312F, 0.8856762F, 0.8840221F, 0.8862373F, 0.8848794F,
			0.8848126F, 0.88528055F, 0.89419687F, 0.8937474F, 0.89260226F,
			0.89151067F, 0.8927657F, 0.89416015F, 0.89436173F, 0.89400584F,
			0.9066291F, 0.9055553F, 0.90576446F, 0.90411836F, 0.9050512F,
			0.9048869F, 0.9065542F, 0.90468806F, 0.90662706F, 0.91979265F,
			0.92067707F, 0.92025024F, 0.9197363F, 0.91869205F, 0.9200663F,
			0.92102593F, 0.92028105F, 0.9377741F, 0.93686056F, 0.9380823F,
			0.9362173F, 0.9361425F, 0.9367017F, 0.93823653F, 0.93753976F,
			0.9373895F, 0.95449084F, 0.95524216F, 0.95511276F, 0.95794433F,
			0.95477927F, 0.9559068F, 0.95763654F, 0.97524714F, 0.97761935F,
			0.97583985F, 0.9762573F, 0.97623324F, 0.97607696F, 0.9778415F,
			1.0003517F, 0.9999242F, 0.9995443F, 1.0015726F, 0.9994851F,
			1.0003833F, 1.0003085F, 1.0242102F, 1.0254365F, 1.0245192F,
			1.0270122F, 1.0257396F, 0.98116845F, 0.9831363F, 0.9831363F,
			0.9829662F, 0.9820254F, 0.98311085F, 1.0116781F, 1.0096554F,
			1.0113041F, 1.0121605F, 1.0136584F, 1.0122361F, 1.0108718F,
			1.0405552F, 1.0414292F, 1.0406356F, 1.0409535F, 1.0399138F,
			1.0391448F, 1.0718989F, 1.0718062F, 1.0710331F, 1.0736808F,
			1.0721959F, 1.072815F, 1.1055398F, 1.1049622F, 1.1031289F,
			1.1051891F, 1.1025414F, 1.1374801F, 1.1369367F, 1.1387093F,
			1.1387408F, 1.1389855F, 1.1742066F, 1.1735379F, 1.1736988F,
			1.1749674F, 1.1728027F, 1.2106977F, 1.2098019F, 1.2109932F,
			1.2096047F, 1.2474178F, 1.2463549F, 1.245177F, 1.2464752F,
			1.2837721F, 1.2836721F, 1.2853575F, 1.2844164F, 1.283994F,
			1.3232532F, 1.3236158F, 1.3231331F, 1.3632053F, 1.3639898F,
			1.3622816F, 1.3653361F, 2.5546186F, 2.554598F, 2.5538247F,
			2.525926F, 2.5240977F, 2.4977818F, 2.4259658F, 2.4271784F,
			2.4015048F, 2.4009218F, 2.4026754F, 2.4006052F, 1.7917247F,
			1.7234066F, 1.7242414F, 1.7242852F, 1.7225102F, 1.7239292F,
			1.699123F, 1.699082F, 1.698383F, 1.7419755F, 1.742727F, 1.7418873F,
			1.7880266F, 1.7860328F, 1.8305638F, 1.8092932F, 1.8084917F,
			1.8100635F, 1.8100619F, 1.8526677F, 1.8540958F, 1.8529724F,
			1.9002076F, 1.9453988F, 1.9459606F, 1.9937851F, 2.0376894F,
			2.082423F, 2.0861232F, 2.1304436F, 2.1764896F, 2.1590617F,
			2.1612833F, 2.1596477F, 2.1593323F, 2.14309F, 2.1435153F,
			2.1427104F, 2.129902F, 2.1306696F, 2.1283834F, 2.126553F,
			2.1272268F, 2.1139655F, 2.115301F, 2.1012433F, 2.0998302F,
			2.1006985F, 2.1017766F, 2.100513F, 2.0901618F, 2.0879385F,
			2.0904682F, 2.0284495F, 2.0292983F, 2.0294392F, 2.018309F,
			1.2542323F, 1.2565422F, 1.2552335F, 1.2552705F, 1.2537031F,
			1.1989954F, 1.1972469F, 1.1976801F, 1.1952813F, 1.1967098F,
			1.1987585F, 1.1979194F, 1.1922443F, 1.1915514F, 1.1907822F,
			1.190729F, 1.1918956F, 1.1917562F, 1.1917762F, 1.1859775F,
			1.1876854F, 1.1860286F, 1.1868505F, 1.1870978F, 1.1856238F,
			1.2858636F, 1.2845104F, 1.2849615F, 1.2835491F, 1.2843899F,
			1.2852416F, 1.9849393F, 1.9846587F, 1.9865052F, 1.9858637F,
			1.9869645F, 1.9872608F, 1.9874609F, 1.9855045F, 1.988237F,
			1.9894807F, 1.9881129F, 1.9885163F, 1.9909381F, 1.9926231F,
			1.9910432F, 1.9991069F, 1.9981835F, 1.9965439F, 1.9978415F,
			1.9974844F, 2.0033169F, 2.0032132F, 2.005907F, 2.0112915F,
			2.0098937F, 2.010613F, 2.0101F, 1.9699347F, 1.9716251F, 1.969888F,
			1.9704958F, 1.9699682F, 1.9801974F, 1.8839052F, 1.8836112F,
			1.5806179F, 1.58037F, 1.5803707F, 1.5811223F, 1.5802466F,
			1.5804397F, 1.593665F, 1.54285F, 1.5434428F, 1.4955616F, 1.449334F,
			1.4020073F, 1.4011339F, 1.353641F, 1.3541924F, 1.3526633F,
			1.1475202F, 1.1475911F, 1.148535F, 1.1468514F, 1.0529675F,
			1.0513984F, 1.00833F, 1.0082769F, 1.0069392F, 0.9594935F,
			0.9607481F, 0.96188223F, 0.9615043F, 0.9146799F, 0.91551787F,
			0.9145029F, 0.91592467F, 0.91582716F, 0.915045F, 0.9165557F,
			0.9133242F, 0.93666804F, 0.9376958F, 0.93722165F, 0.8925809F,
			0.8918668F, 0.891232F, 0.8922167F, 0.8926086F, 0.89144355F,
			0.89218605F, 0.89243037F, 0.9155495F, 0.9189302F, 0.9193279F,
			0.91728497F, 0.91772854F, 0.87527746F, 0.8748973F, 0.87306595F,
			0.8750332F, 0.8735619F, 0.87467754F, 0.87274003F, 0.90421146F,
			0.9018886F, 0.90290445F, 0.90301085F, 0.90282464F, 0.9038319F,
			0.9318399F, 0.93152547F, 0.9323371F, 0.9337142F, 0.93217385F,
			0.93159413F, 0.8936391F, 0.89267474F, 0.891941F, 0.8955196F,
			0.89447236F, 0.8925068F, 0.9270555F, 0.92747974F, 0.9276296F,
			0.9258331F, 0.92578137F, 0.9276947F, 0.9265661F, 0.9621856F,
			0.9608081F, 0.96012306F, 0.9608599F, 0.96090436F, 0.96216077F,
			0.9972095F, 0.9953147F, 0.99753755F, 0.9969149F, 0.9955517F,
			0.997404F, 1.0339142F, 1.0339773F, 1.0337472F, 1.0344361F,
			1.0708385F, 1.0714915F, 1.0711924F, 1.0710996F, 1.0731081F,
			1.1100816F, 1.1113136F, 1.1080725F, 1.108669F, 1.1505073F,
			1.1498104F, 1.1507374F, 1.1500568F, 1.1503544F, 1.1899176F,
			1.1934108F, 1.1912792F, 1.1922156F, 1.2322266F, 1.2306932F,
			1.2342064F, 1.2050304F, 1.204753F, 1.2049851F, 1.2050683F,
			1.2057284F, 1.2487607F, 1.247836F, 1.249383F, 1.290707F, 1.292684F,
			1.2905349F, 1.2899581F, 1.3352469F, 1.3350273F, 1.3357289F,
			1.3783373F, 1.378462F, 1.4226888F, 1.425417F, 1.4683425F,
			1.4701599F, 1.4705387F, 2.7677827F, 2.7681491F, 2.7044778F,
			2.7018657F, 2.7004893F, 2.7483187F, 2.7280428F, 2.7310407F,
			2.7105048F, 2.7109737F, 2.710993F, 2.6927507F, 2.62913F,
			2.6272907F, 2.6281826F, 2.6276715F, 2.6111338F, 2.6122293F,
			2.6590497F, 2.659148F, 2.6442864F, 2.6439009F, 2.6310556F,
			2.6298273F, 2.6295533F, 2.6141047F, 2.6157472F, 2.6172044F,
			2.6031463F, 2.6034505F, 2.5902805F, 2.5914717F, 2.5938222F,
			2.5309281F, 2.5302248F, 2.5350926F, 2.5222614F, 2.5208452F,
			2.5209723F, 2.5110755F, 2.5132377F, 2.513332F, 2.5136838F,
			2.5034473F, 2.5055802F, 2.5042193F, 2.4964385F, 2.4993243F,
			2.491908F, 2.4905713F, 2.4922726F, 2.4858181F, 2.4860072F,
			1.7288436F, 1.729736F, 1.7294822F, 1.7294993F, 1.6785983F,
			1.6787132F, 1.6760973F, 1.6766454F, 1.6766794F, 1.6769474F,
			1.7256107F, 1.7251298F, 1.7257785F, 1.725674F, 2.4725153F,
			2.476019F, 2.4743333F, 2.4752238F, 2.4777842F, 2.474115F,
			2.4768205F, 2.4760296F, 2.4786305F, 2.478906F, 2.479951F, 2.48135F,
			2.4808373F, 2.4835777F, 2.485218F, 2.4863987F, 2.4883194F,
			2.438699F, 2.4387567F, 2.4402013F, 2.4939756F, 2.4951246F,
			2.4921596F, 2.5035853F, 2.5010984F, 2.5017161F, 2.5094702F,
			2.510086F, 2.518655F, 2.517993F, 2.469407F, 2.4697719F, 2.4677424F,
			2.5285442F, 2.528588F, 2.490554F, 2.4914327F, 2.4902701F,
			2.4915972F, 2.5504568F, 2.5502224F, 2.561379F, 2.5146995F,
			2.516402F, 2.5145566F, 2.5289972F, 2.5283694F, 2.5283096F,
			2.5433435F, 2.5432901F, 2.5419152F, 2.559238F, 2.5595057F,
			2.5589697F, 2.5764112F, 2.5736184F, 2.5728993F, 2.591468F,
			2.5919163F, 2.6086967F, 2.610462F, 2.6101947F, 2.6101031F,
			2.6283302F, 2.6278124F, 2.6485388F, 2.648108F, 2.6485398F,
			2.6692739F, 2.6711214F, 2.6910548F, 2.6910245F, 2.6904693F,
			2.6909895F, 2.7126262F, 2.7137275F, 2.7344098F, 2.3556943F,
			2.3542888F, 2.3114884F, 2.3112032F, 1.5285631F, 1.5318108F,
			1.4863502F, 1.4872309F, 1.4860044F, 1.4447848F, 1.4428686F,
			1.4445541F, 1.4453423F, 1.5129372F, 1.5130624F, 1.9448972F,
			1.9427644F, 1.9723208F, 1.9711883F, 1.971902F, 2.0004983F,
			2.0009556F, 1.9990652F, 1.9998119F, 2.0289567F, 2.0299482F};

	/**
	 * Flag containing if the values should read from the list (<code>true</code>)
	 * or if the dummy should always be returned.
	 */
	private boolean serialized = false;

	/**
	 * Current iterator over the float array list.
	 */
	private Iterator<float[]> it;

	/**
	 * Constructs a new value creator which reads a saved laser scan
	 * with a resolution of 681 floats and returns one value for each
	 * time.
	 * 
	 * @param runTime
	 *            the total time span for this creator. In this case
	 *            the time span is ignored. The creator returns one
	 *            value array of the scans at each time requested and
	 *            restarts if every entry was returned once.
	 */
	public TesterBotLaser(long runTime) {
		super(runTime);
		try {
			final InputStream resourceAsStream = this.getClass( )
					.getResourceAsStream("laser" + Constants.DAT_POSTFIX); //$NON-NLS-1$
			maps = ObjectDeSerializer.<ArrayList<float[]>> getObject(resourceAsStream);

			serialized = true;
			it = maps.iterator( );
		}
		catch (Exception e) {
			logClass.info("Info: " + e.getMessage( ) + Constants.LINE_SEPARATOR, //$NON-NLS-1$
					e);
		}
	}

	/**
	 * The given time is ignored. Returns a new scan on each call
	 * until all scans have been returned. Then it restarts at the
	 * first scan.
	 * 
	 * @see de.xirp.testerbot.AbstractValueCreator#calculate(long)
	 */
	@Override
	protected float[] calculate(@SuppressWarnings("unused")
	long elapsedTime) {
		if (serialized) {
			if (it.hasNext( )) {
				return it.next( );
			}
			else {
				it = maps.iterator( );
				return it.next( );
			}
		}
		return dummy;
	}
}
